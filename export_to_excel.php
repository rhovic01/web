<?php
session_start();
require 'db_connect.php';
require 'vendor/autoload.php';

use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;
use PhpOffice\PhpSpreadsheet\Style\Fill;
use PhpOffice\PhpSpreadsheet\Style\Border;
use PhpOffice\PhpSpreadsheet\Style\Alignment;

if (!isset($_SESSION['username'])) {
    header("Location: login.php");
    exit();
}

// Get filter parameters from POST
$reportType = $_POST['report_type'] ?? 'both';
$startDate = $_POST['start_date'] ?? '';
$endDate = $_POST['end_date'] ?? '';
$inventoryStatus = $_POST['inventory_status'] ?? 'all';
$transactionStatus = $_POST['transaction_status'] ?? 'all';

// Build inventory query
$inventoryWhere = [];
if ($inventoryStatus !== 'all') {
    $inventoryWhere[] = "item_availability = ?";
    $inventoryParams[] = $inventoryStatus;
}
$inventorySql = "SELECT * FROM inventory";
if (!empty($inventoryWhere)) {
    $inventorySql .= " WHERE " . implode(" AND ", $inventoryWhere);
}

// Build transactions query
$transactionWhere = [];
$transactionParams = [];
if ($transactionStatus !== 'all') {
    $transactionWhere[] = "status = ?";
    $transactionParams[] = $transactionStatus;
}
if (!empty($startDate)) {
    $transactionWhere[] = "transaction_date >= ?";
    $transactionParams[] = $startDate . ' 00:00:00';
}
if (!empty($endDate)) {
    $transactionWhere[] = "transaction_date <= ?";
    $transactionParams[] = $endDate . ' 23:59:59';
}

$transactionSql = "SELECT * FROM transactions";
if (!empty($transactionWhere)) {
    $transactionSql .= " WHERE " . implode(" AND ", $transactionWhere);
}
$transactionSql .= " ORDER BY transaction_date DESC";

// Execute queries based on selected report type
$inventoryData = [];
$transactionData = [];

if ($reportType === 'inventory' || $reportType === 'both') {
    $inventoryStmt = $conn->prepare($inventorySql);
    if (!empty($inventoryParams)) {
        $inventoryStmt->bind_param(str_repeat('s', count($inventoryParams)), ...$inventoryParams);
    }
    $inventoryStmt->execute();
    $inventoryResult = $inventoryStmt->get_result();
    $inventoryData = $inventoryResult->fetch_all(MYSQLI_ASSOC);
    $inventoryStmt->close();
}

if ($reportType === 'transactions' || $reportType === 'both') {
    $transactionStmt = $conn->prepare($transactionSql);
    if (!empty($transactionParams)) {
        $transactionStmt->bind_param(str_repeat('s', count($transactionParams)), ...$transactionParams);
    }
    $transactionStmt->execute();
    $transactionResult = $transactionStmt->get_result();
    $transactionData = $transactionResult->fetch_all(MYSQLI_ASSOC);
    $transactionStmt->close();
}

$conn->close();

// Create new Spreadsheet object
$spreadsheet = new Spreadsheet();

// Set document properties
$spreadsheet->getProperties()
    ->setCreator($_SESSION['username'])
    ->setLastModifiedBy($_SESSION['username'])
    ->setTitle('IMS Report')
    ->setSubject('Inventory Management System Report')
    ->setDescription('Report generated from IMS')
    ->setKeywords('ims report inventory transactions')
    ->setCategory('Report');

// Create the first sheet for report info
$spreadsheet->setActiveSheetIndex(0);
$infoSheet = $spreadsheet->getActiveSheet();
$infoSheet->setTitle('Report Info');

// Add report information
$infoSheet->setCellValue('A1', 'CICT INVENTORY MANAGEMENT SYSTEM REPORT');
$infoSheet->mergeCells('A1:D1');
$infoSheet->getStyle('A1')->getFont()->setBold(true)->setSize(14);
$infoSheet->getStyle('A1')->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);

$infoSheet->setCellValue('A3', 'Generated on:');
$infoSheet->setCellValue('B3', date('Y-m-d H:i:s'));
$infoSheet->setCellValue('A4', 'Generated by:');
$infoSheet->setCellValue('B4', $_SESSION['username']);
$infoSheet->setCellValue('A5', 'Report Type:');
$infoSheet->setCellValue('B5', ucfirst($reportType) . ' report');

if ($reportType !== 'inventory') {
    $infoSheet->setCellValue('A6', 'Date Range:');
    $infoSheet->setCellValue('B6', (!empty($startDate) ? $startDate : 'Start') . ' to ' . (!empty($endDate) ? $endDate : 'End'));
}

// Style the info sheet
$infoSheet->getStyle('A3:A6')->getFont()->setBold(true);
$infoSheet->getColumnDimension('A')->setWidth(15);
$infoSheet->getColumnDimension('B')->setWidth(30);

// Function to style header row
function styleHeaderRow($sheet, $startCell, $endCell) {
    $sheet->getStyle($startCell . ':' . $endCell)->applyFromArray([
        'font' => ['bold' => true],
        'fill' => [
            'fillType' => Fill::FILL_SOLID,
            'startColor' => ['rgb' => '4F81BD']
        ],
        'font' => [
            'color' => ['rgb' => 'FFFFFF']
        ],
        'borders' => [
            'allBorders' => [
                'borderStyle' => Border::BORDER_THIN
            ]
        ]
    ]);
}

// Create Inventory sheet if needed
if (($reportType === 'inventory' || $reportType === 'both') && !empty($inventoryData)) {
    $inventorySheet = $spreadsheet->createSheet();
    $inventorySheet->setTitle('Inventory');
    
    // Set headers
    $headers = ['ID', 'Item Name', 'Quantity', 'Availability', 'Last Updated'];
    $inventorySheet->fromArray($headers, NULL, 'A1');
    styleHeaderRow($inventorySheet, 'A1', 'E1');
    
    // Add data
    $row = 2;
    foreach ($inventoryData as $item) {
        $inventorySheet->setCellValue('A' . $row, $item['id']);
        $inventorySheet->setCellValue('B' . $row, $item['item_name']);
        $inventorySheet->setCellValue('C' . $row, $item['item_quantity']);
        $inventorySheet->setCellValue('D' . $row, ucfirst($item['item_availability']));
        $inventorySheet->setCellValue('E' . $row, !empty($item['last_updated']) ? 
            date('Y-m-d H:i', strtotime($item['last_updated'])) : 'N/A');
        $row++;
    }
    
    // Auto-size columns
    foreach (range('A', 'E') as $col) {
        $inventorySheet->getColumnDimension($col)->setAutoSize(true);
    }
    
    // Add total row
    $row++;
    $inventorySheet->setCellValue('A' . $row, 'Total Items:');
    $inventorySheet->setCellValue('B' . $row, count($inventoryData));
    $inventorySheet->getStyle('A' . $row . ':B' . $row)->getFont()->setBold(true);
}

// Create Transactions sheet if needed
if (($reportType === 'transactions' || $reportType === 'both') && !empty($transactionData)) {
    $transactionSheet = $spreadsheet->createSheet();
    $transactionSheet->setTitle('Transactions');
    
    // Set headers
    $headers = ['ID', 'Item ID', 'Item Name', 'Student ID', 'Student Name', 'Type', 'Date', 'Status', 'Verified By'];
    $transactionSheet->fromArray($headers, NULL, 'A1');
    styleHeaderRow($transactionSheet, 'A1', 'I1');
    
    // Add data
    $row = 2;
    foreach ($transactionData as $transaction) {
        $transactionSheet->setCellValue('A' . $row, $transaction['id']);
        $transactionSheet->setCellValue('B' . $row, $transaction['item_id']);
        $transactionSheet->setCellValue('C' . $row, $transaction['item_name'] ?? 'N/A');
        $transactionSheet->setCellValue('D' . $row, $transaction['student_id']);
        $transactionSheet->setCellValue('E' . $row, $transaction['student_name']);
        $transactionSheet->setCellValue('F' . $row, ucfirst($transaction['transaction_type']));
        $transactionSheet->setCellValue('G' . $row, date('Y-m-d H:i', strtotime($transaction['transaction_date'])));
        $transactionSheet->setCellValue('H' . $row, ucfirst($transaction['status']));
        $transactionSheet->setCellValue('I' . $row, $transaction['verified_by']);
        $row++;
    }
    
    // Auto-size columns
    foreach (range('A', 'I') as $col) {
        $transactionSheet->getColumnDimension($col)->setAutoSize(true);
    }
    
    // Add total row
    $row++;
    $transactionSheet->setCellValue('A' . $row, 'Total Transactions:');
    $transactionSheet->setCellValue('B' . $row, count($transactionData));
    $transactionSheet->getStyle('A' . $row . ':B' . $row)->getFont()->setBold(true);
}

// Set active sheet to first sheet
$spreadsheet->setActiveSheetIndex(0);

// Create Excel file
$writer = new Xlsx($spreadsheet);

// Set headers for download
header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
header('Content-Disposition: attachment;filename="IMS_Report_' . date('Ymd_His') . '.xlsx"');
header('Cache-Control: max-age=0');

// Save file to PHP output
$writer->save('php://output');
exit;
?>